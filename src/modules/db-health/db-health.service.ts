import { Injectable, Logger } from '@nestjs/common';
import { Pool } from 'pg';
import axios from 'axios';
import { ConfigService } from '@nestjs/config';
import { databaseConfig } from 'src/database/database.config';
import { AppConfig } from 'src/app.config';
import { Cron } from '@nestjs/schedule';

@Injectable()
export class DbHealthService {
  private readonly logger = new Logger(DbHealthService.name);
  private readonly dbPool: Pool;

  private readonly thresholdBytes = 10 * 1024 * 1024; // 10MB

  constructor(private readonly configService: ConfigService) {
    // S·ª≠ d·ª•ng c·∫•u h√¨nh DB t·ª´ db.config.ts
    const dbConfig: any = databaseConfig(this.configService);

    // T·∫°o Pool k·∫øt n·ªëi t·ª´ c·∫•u h√¨nh databaseConfig
    this.dbPool = new Pool({
      user: dbConfig.username,
      host: dbConfig.host,
      database: dbConfig.database,
      password: dbConfig.password,
      port: dbConfig.port,
      ssl: dbConfig.extra.ssl,
    });
  }

  private readonly telegramConfig = {
    botToken:
      this.configService.get<AppConfig['TELEGRAM_BOT_TOKEN']>(
        'TELEGRAM_BOT_TOKEN',
      ),
    apiUrl:
      this.configService.get<AppConfig['TELEGRAM_API_URL']>('TELEGRAM_API_URL'),
    groupChatId: this.configService.get<AppConfig['TELEGRAM_GROUP_CHAT_ID']>(
      'TELEGRAM_GROUP_CHAT_ID',
    ),
  };

  @Cron('*/10 * * * *')
  async checkDatabaseSize(): Promise<string> {
    try {
      const result = await this.dbPool.query(`
        SELECT 'verceldb' AS database_name,
               pg_database_size('verceldb') AS size_in_bytes;
      `);

      const databases = result.rows;

      for (const db of databases) {
        const { database_name, size_in_bytes } = db;

        if (size_in_bytes > this.thresholdBytes) {
          const sizeMb = (size_in_bytes / 1024 / 1024).toFixed(2);
          const message = `
        <b>‚ö†Ô∏è C·∫£nh b√°o:</b>
        <b>Dung l∆∞·ª£ng DB</b> <code>${database_name}</code> <b>ƒë√£ v∆∞·ª£t ng∆∞·ª°ng ${(
          this.thresholdBytes /
          1024 /
          1024
        ).toFixed(2)} MB.</b>
        <b>üìä Hi·ªán t·∫°i:</b> <i>${sizeMb} MB</i>
        <b>üìù Vui l√≤ng ki·ªÉm tra c∆° s·ªü d·ªØ li·ªáu c·ªßa b·∫°n ngay!</b>
      `;
          await this.sendTelegramMessage(message);
          return sizeMb;
        }
      }
    } catch (error) {
      this.logger.error(
        'L·ªói khi ki·ªÉm tra dung l∆∞·ª£ng c∆° s·ªü d·ªØ li·ªáu PostgreSQL:',
        error,
      );
    }
  }

  // G·ª≠i tin nh·∫Øn c·∫£nh b√°o ƒë·∫øn Telegram
  private async sendTelegramMessage(message: string): Promise<void> {
    try {
      const { botToken, apiUrl, groupChatId } = this.telegramConfig;

      const url = `${apiUrl}/bot${botToken}/sendMessage`;
      const response = await axios.post(url, {
        chat_id: groupChatId,
        text: message,
        parse_mode: 'HTML',
      });

      if (response.status === 200) {
        this.logger.log(`ƒê√£ g·ª≠i c·∫£nh b√°o ƒë·∫øn chat_id: ${groupChatId}`);
      } else {
        this.logger.error(
          `Kh√¥ng th·ªÉ g·ª≠i c·∫£nh b√°o ƒë·∫øn chat_id: ${groupChatId}`,
          response.data,
        );
      }
    } catch (error) {
      if (error.response) {
        // In l·ªói chi ti·∫øt t·ª´ response c·ªßa Telegram
        this.logger.error(
          'L·ªói khi g·ª≠i tin nh·∫Øn Telegram. Response error:',
          error.response.data,
        );
      } else if (error.request) {
        // L·ªói khi kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi
        this.logger.error(
          'L·ªói khi g·ª≠i tin nh·∫Øn Telegram. Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi:',
          error.request,
        );
      } else {
        // L·ªói kh√°c
        this.logger.error('L·ªói khi g·ª≠i tin nh·∫Øn Telegram. L·ªói:', error.message);
      }
    }
  }
}
